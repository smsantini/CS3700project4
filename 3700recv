#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
# handle delaying of packet to the receiver from sender
# log the error

import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1000
TIMEOUT = 30
WINDOW_SIZE = 1
SEQUENCE_FROM_SENDER = []

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))



RESULT_STRING = ""
# Now listen for packets
while True:
#  print("result is: ")
  result = sock.recvfrom(MSG_SIZE)
#  print(result)
  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result
#    print("data is: ")
#    print(data)
    try:
      decoded = json.loads(data)
      # If there is data, we accept it and print it out
      if (decoded['data']):
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        #sys.stdout.write(decoded['data'])
        CUR_SEQUENCE = 0 if len(SEQUENCE_FROM_SENDER) == 0 else SEQUENCE_FROM_SENDER[len(SEQUENCE_FROM_SENDER - 1)]
        if CUR_SEQUENCE + len(decoded['data']) == decoded['sequence']:
          log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
          RESULT_STRING += decoded['data']
          WINDOW_SIZE += 1
          msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data']), "window": WINDOW_SIZE})
          sock.sendto(msg, addr)
          CUR_SEQUENCE += len(decoded['data'])
        else: 
          log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") REJECTED (in-order)")
          # Send back an ack to the sender
          # msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
          msg = json.dumps({"ack": "received the wrong packet, sequence number does not match", "seq": CUR_SEQUENCE})
          WINDOW_SIZE -= 1
          log("ABOUT TO SEND " + msg)
        if sock.sendto(msg, addr) < len(msg):
          log("[error] unable to fully send packet")

      if (decoded['eof']):
        sys.stdout.write(RESULT_STRING)
        log("[completed]")
        msg = json.dumps({"ack": "receiver program ended"})
        log("receiver exit message constructed")
        sock.sendto(msg, addr)
        sys.exit(0)

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
