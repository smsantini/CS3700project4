#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code


# sending command script
# ./3700send <recv_host>:<recv_port>

# receiver command script
# ./3700recv <recv_port>


# code only work if network is perfectly reliable, modify it to handle:
# delayed packet: actually delay the number of packet that should be delayed in the sender
# packet retransmission --> dropped packet: wait for ROT and send back 3 ACK of previous received packet 
# duplicate packet: 
# reordered handling:  

# bandwidth
# latency
# drop
# delay
# reorder
# duplicate


import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 5
TIMEOUT = 30
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# UDP_PORT = int(sys.argv[1]) # Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet(msg):
  if sock.sendto(msg, dest) < len(msg):
    log("[error] unable to fully send packet")
    return False
  else:
    log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
     
# PROPOSED CHANGE: read in input, separate into appropriately sized messages, call send_next_packet(message) for each message
global SEQUENCE    
data = sys.stdin.read()
dataSize = len(data)
if dataSize <= DATA_SIZE:
  if (dataSize > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": True})
    SEQUENCE += len(data) 
    send_next_packet(msg)   
  else:
    return False
else:
  curSize = 0
  while curSize < dataSize:
    msg = {}
    if dataSize - curSize >= DATA_SIZE:
      Data = data[curSize: curSize+DATA_SIZE + 1]
      msg = json.dumps({"sequence": SEQUENCE, "data": Data, "ack": False, "eof": False})
      curSize += DATA_SIZE
      SEQUENCE += DATA_SIZE
    else:
      Data = data[curSize: (dataSize-curSize)]
      msg = json.dumps({"sequence": SEQUENCE, "data": Data, "ack": False, "eof": True})
      curSize += (dataSize - curSize)
      SEQUENCE += (dataSize - curSize)
  send_next_packet(msg)

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)

      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        log("[recv ack] " + str(SEQUENCE))

        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
